openapi: 3.0.0
info:
  title: Todo Application API
  version: 1.0.0
  description: Basic todo application

paths:
  /health:
    get:
      summary: Health Check
      operationId: getHealth
      tags:
        - Health
      responses:
        200:
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
                required:
                  - status
        
        500:
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /todos:
    get:
      summary: Get all todos
      operationId: getTodos
      tags:
        - Todos
      responses:
        200:
          description: List of todos retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create a new todo
      operationId: createTodo
      tags:
        - Todos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTodoRequest'
      responses:
        201:
          description: Todo created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        400:
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Status:
      type: string
      enum:
        - ok
        - unhealthy
      description: The health status of the service
      example: ok
    
    Todo:
      type: object
      required:
        - id
        - title
        - completed
        - createdAt
      properties:
        id:
          type: string
          description: Unique identifier for the todo
          example: "123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          description: The title/description of the todo
          example: "Buy groceries"
        completed:
          type: boolean
          description: Whether the todo is completed
          example: false
        createdAt:
          type: string
          format: date-time
          description: When the todo was created
          example: "2024-01-15T10:30:00Z"
    
    CreateTodoRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          description: The title/description of the todo
          minLength: 1
          maxLength: 500
          example: "Buy groceries"
    
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          description: A unique error code for programmatic handling
          example: 500
        message:
          type: string
          description: A human-readable error message
          example: "An unexpected error occurred on the server."